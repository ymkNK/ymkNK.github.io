<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Refactoring on lllovol</title>
        <link>https://lllovol.com/tags/refactoring/</link>
        <description>Recent content in Refactoring on lllovol</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <lastBuildDate>Mon, 07 Feb 2022 20:17:32 +0800</lastBuildDate><atom:link href="https://lllovol.com/tags/refactoring/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>《重构》-代码的坏味道</title>
        <link>https://lllovol.com/p/2022/2/refactoring-chapter3/</link>
        <pubDate>Mon, 07 Feb 2022 20:17:32 +0800</pubDate>
        
        <guid>https://lllovol.com/p/2022/2/refactoring-chapter3/</guid>
        <description>&lt;img src="https://lllovol.oss-cn-beijing.aliyuncs.com/assets/img/post/2.jpeg" alt="Featured image of post 《重构》-代码的坏味道" /&gt;&lt;h1 id=&#34;神秘命名&#34;&gt;神秘命名&lt;/h1&gt;
&lt;p&gt;整洁代码最重要的一环就是好的名字，所以我们会深思熟虑如何给函数、模块、变量和类命名，使他们能清晰表面自己的功能和用法。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;需要考虑取一个好的名字&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;重复代码&#34;&gt;重复代码&lt;/h1&gt;
&lt;p&gt;如果你在一个以上的地点看到相同的代码结构，那么可以肯定：设法将它们合而为一，程序会变得更好。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;抽取重复代码，使之能够复用&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;过长函数&#34;&gt;过长函数&lt;/h1&gt;
&lt;p&gt;据我们的经验，活得最长、最好的程序，其中的函数都比较短。&lt;/p&gt;
&lt;p&gt;短的函数具有更好的阐释力、更易于分享、更多的选择。&lt;/p&gt;
&lt;p&gt;函数越长，就越难理解。&lt;/p&gt;
&lt;p&gt;每当感觉需要以注释来说明点什么的时候，我们就把需要说明的东西写进一个独立函数中，并以其用途（而非实现手法）命名。&lt;/p&gt;
&lt;p&gt;条件表达式和循环常常也是提炼的信号。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可以考虑使用横屏显示器进行开发，这样潜意识里就不会把一个函数写的过长&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;过长的参数列表&#34;&gt;过长的参数列表&lt;/h1&gt;
&lt;p&gt;过长的参数列表本身也经常令人迷惑。&lt;/p&gt;
&lt;p&gt;如果可以向某个参数发起查询而获得另一个参数的值，那么就可以使用以查询取代参数去掉第二个参数。&lt;/p&gt;
&lt;p&gt;使用类可以有效地缩短参数列表。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Go中可以使用struct的方式，来传入较多的参数&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;全局数据&#34;&gt;全局数据&lt;/h1&gt;
&lt;p&gt;全局数据是最刺鼻的坏味道之一。&lt;/p&gt;
&lt;p&gt;一次又一次，全局数据造成了哪些诡异的bug，而问题的根源却在遥远的别处，想要找到出错的代码难于登天。&lt;/p&gt;
&lt;p&gt;良药与毒药的却别在于剂量。有少量的全局数据或许无妨，但数量越多，处理的难度就会指数上升。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;尽量少使用全局变量&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;可变数据&#34;&gt;可变数据&lt;/h1&gt;
&lt;p&gt;对数据的修改经常导致出乎意料的结果和难以发现的bug。&lt;/p&gt;
&lt;p&gt;如果可变数据的值能在其他地方计算出来，这就是一个特别刺鼻的坏味道。&lt;/p&gt;
&lt;h1 id=&#34;发散式变化&#34;&gt;发散式变化&lt;/h1&gt;
&lt;p&gt;一旦需要修改，我们希望能够跳到系统的某一点进行修改，只在此处进行修改。如果不能做到这一点，你就能嗅出两种紧密相关的刺鼻味道中的一种了。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一个类受多种变化的影响&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;散弹式修改&#34;&gt;散弹式修改&lt;/h1&gt;
&lt;p&gt;如果遇到某种变化，你都必须在许多不同的类内做出许多小修改，你所面临的坏味道就是散弹式修改。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一种变化引发多个类对应改动&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;依恋情结&#34;&gt;依恋情结&lt;/h1&gt;
&lt;p&gt;所谓模块化，就是力求将代码分出区域，最大化区域内部的交互、最小化跨区域的交互。&lt;/p&gt;
&lt;p&gt;如果一个函数跟另一个模块的函数或者数据交流格外频繁，远胜于在自己所处模块内的交流，这就是依恋情结的典型情况。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;函数对某个类的兴趣高过对自己所处类的兴趣&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;数据泥团&#34;&gt;数据泥团&lt;/h1&gt;
&lt;p&gt;你常常可以在很多地方看到相同的三四项数据：两个类中相同的字段、许多函数签名中相同的参数。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;两个类中同样的字段、很多函数签名中同样的參数&lt;/li&gt;
&lt;li&gt;这种情况汪汪和历史遗留问题相关&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;基本类型偏执&#34;&gt;基本类型偏执&lt;/h1&gt;
&lt;p&gt;大多数编程环境都大量使用基本类型，即整数、浮点数和字符串等。&lt;/p&gt;
&lt;p&gt;一个有趣的现象：很多程序员不愿意创建对自己的问题域有用的基本类型。&lt;/p&gt;
&lt;p&gt;字符串是这种坏味道的最佳培养皿，比如，电话号码不只是一串字符。&lt;/p&gt;
&lt;h1 id=&#34;重复的switch&#34;&gt;重复的switch&lt;/h1&gt;
&lt;p&gt;我们现在更关注重复的switch：在不同的地方反复使用同样的switch逻辑（可能是以switch/case语句的形式，也可能是以连续的if/else语句的形式）。应该以多态取代条件表达式消除掉。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;例如可以使用策略模式等方式&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;循环语句&#34;&gt;循环语句&lt;/h1&gt;
&lt;p&gt;函数作为一等公民以及得到广泛的支持，因此我们可以使用以管道取代循环来让这些老古董退休。&lt;/p&gt;
&lt;p&gt;管道操作（如 filter和map）可以帮助我们更快地看清被处理的元素以及他们的动作.&lt;/p&gt;
&lt;h1 id=&#34;冗赘的元素&#34;&gt;冗赘的元素&lt;/h1&gt;
&lt;p&gt;程序元素（如类和函数）能给代码增加结构，从而支持变化、促进复用或者哪怕只提供更好的名字也好，但有时我们真的不需要这层额外的结构。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可能有这样一个函数，他的名字就跟实现代码看起来一模一样。&lt;/li&gt;
&lt;li&gt;可能有这样一个类，根本就是一个简单的函数。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;夸夸其谈通用性&#34;&gt;夸夸其谈通用性&lt;/h1&gt;
&lt;p&gt;如果函数或类的唯一用户是测试用例，这就飘出了这个坏味道。
如果发现这样的函数或类，可以先删掉测试用例，然后移除死代码。&lt;/p&gt;
&lt;h1 id=&#34;临时字段&#34;&gt;临时字段&lt;/h1&gt;
&lt;p&gt;某个字段仅为某种特定情况而设。这样的代码让人不易理解，因为你通常认为对象在所有时候都需要它的所有字段。在字段未使用的情况下猜测当初设置它的目的，会让你发疯。&lt;/p&gt;
&lt;h1 id=&#34;过长的消息链&#34;&gt;过长的消息链&lt;/h1&gt;
&lt;p&gt;如果你看到用户向一个对象请求另一个对象，然后再向后者请求另一个对象，然后再请求另一个对象——这就是消息链。&lt;/p&gt;
&lt;p&gt;在实际代码中你看到的可能是一长串取值函数或者一长串临时变量。&lt;/p&gt;
&lt;h1 id=&#34;中间人&#34;&gt;中间人&lt;/h1&gt;
&lt;p&gt;对象的基本特征之一就是封装——对外部世界隐藏其内部细节。&lt;/p&gt;
&lt;p&gt;封装往往伴随着委托。&lt;/p&gt;
&lt;p&gt;但是人们可能过度运用委托。你也许会看到某个类的接口有一半的函数都委托给其他类，这样就是过度运用。&lt;/p&gt;
&lt;h1 id=&#34;内幕交易&#34;&gt;内幕交易&lt;/h1&gt;
&lt;p&gt;如果两个模块总是窃窃私语，就应该用搬移函数和搬移字段减少它们的私下交流，把这种交易都放到明面上来。&lt;/p&gt;
&lt;p&gt;如果两个模块有共同的兴趣，可以尝试再新建一个模块，把这些公用的数据放在一个管理良好的地方。&lt;/p&gt;
&lt;h1 id=&#34;过大的类&#34;&gt;过大的类&lt;/h1&gt;
&lt;p&gt;如果想利用单个类做太多事情，其内往往就会出现太多字段。一旦如此，重复代码也就接踵而至了。&lt;/p&gt;
&lt;h1 id=&#34;异曲同工的类&#34;&gt;异曲同工的类&lt;/h1&gt;
&lt;p&gt;使用类的好处之一在于可以替换：今天用这个类，未来可以换成另一个类。&lt;/p&gt;
&lt;h1 id=&#34;纯数据类&#34;&gt;纯数据类&lt;/h1&gt;
&lt;p&gt;所谓纯数据类是指：他们拥有一些字段，以及用于访问（读写）这些字段的函数，除此之外一无长物。&lt;/p&gt;
&lt;p&gt;如果发生这种情况，你应该在别人注意到之前，立刻运用封装记录将他们封装起来。&lt;/p&gt;
&lt;h1 id=&#34;被拒绝的遗赠&#34;&gt;被拒绝的遗赠&lt;/h1&gt;
&lt;p&gt;子类应该继承超类的函数和数据。但如果他们不想或不需要继承，又该怎么办呢？他们得到所有礼物，却只从中挑选几样来玩！&lt;/p&gt;
&lt;p&gt;这种情况就不要虚情假意地糊弄继承体系，应该运用委托取代子类或者委托取代超类彻底划清界限。&lt;/p&gt;
&lt;h1 id=&#34;注释&#34;&gt;注释&lt;/h1&gt;
&lt;p&gt;别担心，不是说你不该写注释。&lt;/p&gt;
&lt;p&gt;有写注释存在是因为代码很糟糕，这种情况的发生次数之多，实在令人吃惊。&lt;/p&gt;
&lt;p&gt;注释可以带我们找到本章先前提到的各种坏味道。&lt;/p&gt;
&lt;p&gt;当你感觉需要撰写注释时，请先尝试重构，试着让所有注释都变得多余。
如果你需要注释来解释一块代码做了什么，试试提炼函数。如果函数已经提炼出来，试试用改变函数声明为它改名，再或者引入断言。如果你实在不知道该做什么，这才是注释的良好运用时机。&lt;/p&gt;
&lt;p&gt;除了用来记述将来的打算之外，注释还可以用来标记你并无十足把握的区域，比如你可以在注释里写下自己“为什么做某某事”。这类信息可以帮助将来的修改者，尤其是那些健忘的家伙。&lt;/p&gt;
&lt;h1 id=&#34;其他&#34;&gt;其他&lt;/h1&gt;
&lt;p&gt;本文笔记原链接：https://blog.csdn.net/u014779536/article/details/107309260
其内容也主要出自《重构-改善既有代码的设计》&lt;/p&gt;
</description>
        </item>
        <item>
        <title>《重构》-重构的原则</title>
        <link>https://lllovol.com/p/2021/12/refactoring-chapter2/</link>
        <pubDate>Tue, 07 Dec 2021 21:05:58 +0800</pubDate>
        
        <guid>https://lllovol.com/p/2021/12/refactoring-chapter2/</guid>
        <description>&lt;img src="https://lllovol.oss-cn-beijing.aliyuncs.com/assets/img/post/6.jpeg" alt="Featured image of post 《重构》-重构的原则" /&gt;&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;本文是一篇关于Martin Fowler《重构：改善既有代码的设计》的第二章读书笔记与总结。&lt;/p&gt;
&lt;h2 id=&#34;何谓重构&#34;&gt;何谓重构&lt;/h2&gt;
&lt;p&gt;很多一线的实践者会非常随意的使用重构这个词，但是作者会非常严谨地使用重构。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;重构（名词）：对软件内部的结构的一种调整，目的是在不改变可观察行为的前提下，提高其可理解性，降低其修改成本&lt;/li&gt;
&lt;li&gt;重构（动词）：使用一系列重构手法，在不改变可观察行为的前提下，调整其结构。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;重构的关键在于&lt;strong&gt;运用大量微且保持软件行为的步骤，一步步达成大规模的修改。&lt;/strong&gt;
每个单独的重构呀么很小，要么由若干个小步骤组合而成。这样的好处是，即使重构没有完成，也可以在任何时刻停下来，代码很少进入到不可工作的状态。&lt;/p&gt;
&lt;h3 id=&#34;重构与性能优化&#34;&gt;重构与性能优化&lt;/h3&gt;
&lt;p&gt;二者有很多相似之处&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;都需要修改代码&lt;/li&gt;
&lt;li&gt;都不会改变程序的整体功能&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;区别&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;重构是为了让代码更容易理解，更易于修改。这可能会让程序运行的更快，也可能运行的更慢。&lt;/li&gt;
&lt;li&gt;性能优化时，只关心如何让代码程序运行得更快，最终得到的代码有可能更难理解和维护，对此需要有心理准备。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;两顶帽子&#34;&gt;两顶帽子&lt;/h2&gt;
&lt;p&gt;Kent Beck提出了两顶帽子的比喻。使用重构技术进行软件开发是，可以把自己的时间分配给两种截然不同的行为：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;添加新功能：不应该修改既有的代码，只管添加新功能。同时需要添加测试并且让测试正常运行。&lt;/li&gt;
&lt;li&gt;重构：不再添加新的功能，只调整代码的结构。此时不应该添加任何测试，只有在绝对必要的时候才修改测试。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;但是在实际的开发过程当中，我实际会经常变换帽子：当我开始添加新功能时候，突然意识到如果把程序结构修改一下，功能添加会容易很多。于是就换上了一顶重构帽子，开始了一会的重构工作。当程序结构调整好了之后，又戴上了原来的帽子。&lt;/p&gt;
&lt;p&gt;总之，整个过程中，无论何时何地，都要清楚当前的自己戴的帽子究竟是哪一个，并且了解不同的帽子对编程状态提出的&lt;strong&gt;不同的要求&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;为何重构&#34;&gt;为何重构&lt;/h2&gt;
&lt;p&gt;重构绝对不是包治百病的灵丹妙药，更不是所谓的“银弹”，但是绝对算是一把银钳子，可以帮你始终良好的控制自己的代码。
重构是一个工具，它能够用于以下几个目的：&lt;/p&gt;
&lt;h3 id=&#34;重构改进软件的设计&#34;&gt;重构改进软件的设计&lt;/h3&gt;
&lt;p&gt;如果没有重构，程序的内部设计（架构）会逐渐的腐败变质。当人们只为了短期目的而修改代码时，经常没有完全理解架构的整体设计，于是代码就逐渐失去了自己的结构。（屎山代码就是这么来的，但是没有办法避免）
越难看出代码的设计意图，就越难保护其设计，腐败的也就越快。经常的重构有助于代码为支持自己该有的形态。
同时，消除重复代码，就可以确定所有事物和行为在代码中只表述一次，这才是优秀设计的根本。&lt;/p&gt;
&lt;h3 id=&#34;重构使软件更容易理解&#34;&gt;重构使软件更容易理解&lt;/h3&gt;
&lt;p&gt;虽然代码是在计算机上运行的，编程的核心就是“准确的说出我想要的”，但是除了计算机之外，源码还有其他读者，几个月之后可能会有另外以为程序员尝试读懂我的代码并且进行一些修改。我们很容易就忘记了这个读者，“又不是不能用”，然后这个代码就这么写出来了。而后人可能会花费很多时间来理解和阅读我的代码。&lt;/p&gt;
&lt;p&gt;因此，我们需要改变一下开发的节奏，让代码变得更加易于理解。重构可以让代码更加易读。&lt;/p&gt;
&lt;p&gt;做一个懒惰的程序员，表现形式之一就是，总是记不住自己写过的代码。对于任何能够立刻查阅的东西，都可以故意不去记它，别把自己的脑袋塞爆了。尽量把需要记住的东西写在代码里。&lt;/p&gt;
&lt;h3 id=&#34;重构帮助找到bug&#34;&gt;重构帮助找到bug&lt;/h3&gt;
&lt;p&gt;重构的时候，能够更加深入的理解代码的所做所谓，并立即把新的理解反映在代码当中。在弄清楚程序结构的同时，必须要做一些假设去验证，因此想不把bug找出来都难。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Kent Beck：我不是一个特别好的程序员，我只是一个有一些特别好的习惯的还不错的程序员&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;重构提高编程速度&#34;&gt;重构提高编程速度&lt;/h3&gt;
&lt;p&gt;最后，前面的一切都归结到了这一点: 重构能够帮助我们更快的开发程序。&lt;/p&gt;
&lt;p&gt;这虽然有点违反直觉，因为重构本来就是一件耗费精力的事情。但是如果一个代码全靠补丁来不断的修复，最后就是补丁补补丁，需要考古学家才能弄清楚这个代码到底是怎么个回事。以至于最后，这个系统的负担会不断拖慢新增功能的速度，到最后程序员恨不得重头开始写整个系统。&lt;/p&gt;
&lt;p&gt;如果代码很清晰，引入bug的可能性就会很小，即使引入的bug，调试和排查也会容易很多。理想情况下，我的代码库会逐渐严骅成为一个平台，在其上可以容易的构造与其领域相关的新功能。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;设计耐久性假说：通过投入精力改善内部设计，我们增加了软件的耐久性，从而可以更长时间的保持开发的快速。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;何时重构&#34;&gt;何时重构&lt;/h2&gt;
&lt;p&gt;编程的每个小时，都应该去做重构。有几种方式可以把重构融入工作过程中。&lt;/p&gt;
&lt;h3 id=&#34;三次法则&#34;&gt;三次法则&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;第一次做某件事的时候尽管去做&lt;/li&gt;
&lt;li&gt;第二次做类似的事情会产生方案，但是无论如何还是可以去去做&lt;/li&gt;
&lt;li&gt;第三次再做类似的事情，就应该去重构&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;预备性重构让添加新功能更容易&#34;&gt;预备性重构：让添加新功能更容易&lt;/h3&gt;
&lt;p&gt;重构的最佳时机就是在添加新功能之前&lt;/p&gt;
&lt;h3 id=&#34;帮助理解的重构使代码更易懂&#34;&gt;帮助理解的重构：使代码更易懂&lt;/h3&gt;
&lt;p&gt;需要理解代码做什么才能着手修改&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;比如看到一段迷惑的代码，自问，能不能重构它，让它看起来一目了然？&lt;/li&gt;
&lt;li&gt;看到结果糟糕的条件判断，想修改，发现函数命名太糟糕了？
等等，都是重构的机会。哪怕只是修改函数的命名这类重构，只要能够更加清楚的表达出一图，都会是非常有意义的。这些初步的重构，就像是扫去窗上的灰尘，能够让我们看到窗外的风景。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;捡垃圾式重构&#34;&gt;捡垃圾式重构&lt;/h3&gt;
&lt;p&gt;可以把要重构的点记下来，把更紧急的事情处理之后，抽空来处理这些垃圾。积少成多&lt;/p&gt;
&lt;h3 id=&#34;有计划的重构和见机行事的重构&#34;&gt;有计划的重构和见机行事的重构&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;肮脏的代码必须重构，但是漂亮的代码也需要很多重构（需求和情况是会不断改变的）&lt;/li&gt;
&lt;li&gt;每一次修改的时候，首先要令修改很容易（这件事有时候会很难），然后再进行这次容易的修改&lt;/li&gt;
&lt;li&gt;软件永远都不应该被视为“完成”&lt;/li&gt;
&lt;li&gt;重构常常和新功能紧密交织，不值得花功夫将它们分开。并且这样做也使得重构脱离上下文（除非真的有必要，感觉到真有的有益时，才值得这样做）&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;长期重构&#34;&gt;长期重构&lt;/h3&gt;
&lt;p&gt;重构可能会花费几分钟、几个小时、几个周、几个月，但是哪怕是大型的重构项目，也不愿意让一个团队专门来做重构。可以让团队达成共识，可以逐步解决这个问题。
小改动的好处是，不会破坏代码。例如想要换掉一个正在使用的库，可以引入一层新的抽象，兼容新旧两个库的接口，直到调用方已经完全改用了这层抽象。&lt;/p&gt;
&lt;h3 id=&#34;复审代码时重构&#34;&gt;复审代码时重构&lt;/h3&gt;
&lt;p&gt;重构可以帮助我复审别人的代码，同时还能帮助cr工作得到更加具体的结果。最好的情况，就是两个人肩并肩，一起cr，一起重构，这也就是所谓的结对编程了&lt;/p&gt;
&lt;h3 id=&#34;怎么对经理说客户&#34;&gt;怎么对经理说？（客户）&lt;/h3&gt;
&lt;p&gt;重构的时候不要告诉经理（客户），他们是进度驱动的，而我们发现重构就是完成工作最快的方式，那么就做。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;我认为最快的方式就是重构，所以我就重构&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;何时不应该重构&#34;&gt;何时不应该重构&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;如果丑陋的代码能够隐藏在一个api之下，不影响我使用，那就可以忍受它继续保持丑陋。只有需要了解其工作原理时，重构才有价值&lt;/li&gt;
&lt;li&gt;重写比重构还容易的时候，就别重构了，直接重写。不过如何判断，就需要丰富的经验了&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;重构的挑战&#34;&gt;重构的挑战&lt;/h2&gt;
&lt;h3 id=&#34;延缓新功能开发&#34;&gt;延缓新功能开发&lt;/h3&gt;
&lt;p&gt;重构的唯一目的是我们开发的更快，用更少的工作量创造更大的价值。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果一个小功能，可以先上小功能，再做大规模的重构。这需要程序员专业的判断能力，无法量化决定的依据。&lt;/li&gt;
&lt;li&gt;重构应该总是以收益来驱动。而不是掉进“整洁的代码”“良好的工程实践”这类道德理由的陷阱里。纯粹考虑经济利益。都是上班，为何不用一些工作效率更高的方式来完成工作呢？&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;代码所有权&#34;&gt;代码所有权&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;不建议搞细粒度的强代码所有制&lt;/li&gt;
&lt;li&gt;鼓励开源的模型（比如一些开源协议）&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;分支&#34;&gt;分支&lt;/h3&gt;
&lt;p&gt;分支的合并是一个复杂的问题，随着特性分支的存在的时间加长，合并的难度会指数上升。减少特性分支的生命周期。
使用的方法就是CI（Continuous Integration）,也叫作“基于主干开发”。在使用CI时，每个团队成员每天至少向主干分支集成一次。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;避免了任何分支之间差异太大&lt;/li&gt;
&lt;li&gt;降低了合并的难度&lt;/li&gt;
&lt;li&gt;必须保证主干的健康&lt;/li&gt;
&lt;li&gt;学会将大功能拆小，将未完成又无法拆小的功能隐藏掉&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;测试&#34;&gt;测试&lt;/h3&gt;
&lt;p&gt;想要重构，就必须要有可以自测试的代码（单元测试的重要性）自测试代码和继承测试紧密相关。我们依赖持续继承来及时捕获分支继承时的语义冲突。测试也是持续交付的关键环节&lt;/p&gt;
&lt;h3 id=&#34;遗留代码&#34;&gt;遗留代码&lt;/h3&gt;
&lt;p&gt;对于别人写的代码，留下来的遗产，没有测试我们就加测试，听起来简单，做起来可不容易。再有了充分的测试之后再进行重构。
这很难，但是于是频繁使用的代码，改善其可理解性的努力就能获得更丰厚的回报。&lt;/p&gt;
&lt;h3 id=&#34;数据库&#34;&gt;数据库&lt;/h3&gt;
&lt;p&gt;将代码和数据库的变更，通过脚本代码的方式来进行同步。和常规的重构不同，数据库重构最好是分散到多次生产发布来完成，这样即使出现问题，也比较容易回滚。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;同时写入新旧两个字段，然后再把读的地方逐个换成新的字段，看有没有bug，确定没有问题之后，在进行修改，删除无人使用的旧字段。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;重构架构和yagni&#34;&gt;重构、架构和YAGNI&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;在任何时候，代码开始写之前就应该完成软件的设计和架构，一旦代码写了出来，代码就开始腐败了&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;重构改变了这种观点，重构可以改善现有代码的设计。这种观点最大的问题，就是大多数时候，软件的需求都很难被预先充分理解。只有在真正使用的时候，人们才会知道自己真正想要的是什么（就像人生很多事情，在经历的时候，才会知道自己真正想要的是什么）
应对未来变化的办法之一，就是在软件植入灵活性机制。在编写一个函数的时候就要思考，如何将这个代码变得更有通用性。如果一个灵活性会增加软件复杂度，就必须证明它值得被引入。&lt;/p&gt;
&lt;p&gt;这种设计方法叫做简单设计、增量式设计或者YAGNI：You aren&amp;rsquo;t going to need it。 YAGNI并不是不做架构性思考的意思，而是应该融为一体，将重构作为基础。&lt;/p&gt;
&lt;h2 id=&#34;重构和软件开发过程&#34;&gt;重构和软件开发过程&lt;/h2&gt;
&lt;p&gt;大部分的敏捷项目都只是徒有其名，真正的敏捷方式的运作，团队成员必须要在重构上有能力、有激情，采用的开发过程必须与常规的、持续的重构相匹配。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;自测试代码&lt;/li&gt;
&lt;li&gt;持续继承&lt;/li&gt;
&lt;li&gt;重构
有了这些核心实践打下的基础，才能让项目始终处于可发布的状态，做到一天多次发布，同时还增加了软件的可靠性、减少耗费在bug上的时间&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;重构和性能&#34;&gt;重构和性能&lt;/h2&gt;
&lt;p&gt;并不赞同为了提高设计的纯洁性而忽视性能。我们应该先写出可调优的软件，然后调优它以获得足够的速度。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;时间预算法：用于性能要求极高的实时系统，在设计师就做好预算，给每个组件做好预算，分配好资源&lt;/li&gt;
&lt;li&gt;持续关注法：要求程序员在任何时间做任何事情，都要设法保持系统的高性能。但是通常不会有太大的作用。通常任何修改如果只是为了提高性能，通常会使得程序难以维护。&lt;/li&gt;
&lt;li&gt;统计优化法：使用工具去监控程序，看看90%的资源和时间都被什么地方的代码消耗了，着重优化那些地方，找出性能热点。这样，较少的工作量也能有不错的成果。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;重构起源于何处&#34;&gt;重构起源于何处&lt;/h2&gt;
&lt;p&gt;作者找了找，但是没找到。优秀的程序员肯定会花时间来清理自己的代码。整洁的代码肯定比杂乱无章的代码容易修改，而且他们知道，几乎是无法一开始就写出整洁的代码的。
重构对于提高生产力非常重要。
巴拉巴拉，是作者的一些经历和对重构这个概念和技术的推广，然后逐渐被行业广泛接收。（也有负面的效果，Java世界里，重构被滥用，其实只是不严谨的结构调整）&lt;/p&gt;
&lt;h2 id=&#34;自动化重构&#34;&gt;自动化重构&lt;/h2&gt;
&lt;p&gt;主要靠着IDE实现。比如JetBrains的Intelli IDEA。后面IBM还出了VisualAge，然后是Eclipse等等。现在，只要是正常主流的工具或者编译器，都支持重构。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;文本操作，查找替换&lt;/li&gt;
&lt;li&gt;提取变量&lt;/li&gt;
&lt;li&gt;代码导航&lt;/li&gt;
&lt;li&gt;静态检查&lt;/li&gt;
&lt;li&gt;理解、修改、处理语法树
这背后的实现，应该是很有挑战的事情，修改和重构之后，还需将结果写回编辑器视图等等。尽管现在的工具已经很强大了，但是也不能掉以轻心，因为某些情况，比如反射等等，编译器并不能很好的处理，依然需要我们强大的测试来保证重构。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;延展阅读&#34;&gt;延展阅读&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Josh Kerievsky《重构与模式》&lt;/li&gt;
&lt;li&gt;Ambler &amp;amp; Sadalage《数据库重构》&lt;/li&gt;
&lt;li&gt;Harold《重构HTML》&lt;/li&gt;
&lt;li&gt;Michael Feather 《修改代码的艺术》&lt;/li&gt;
&lt;li&gt;Jay Fields &amp;amp; Shane Harvey 写了关于Ruby的《重构》&lt;/li&gt;
&lt;li&gt;关于本书&lt;a class=&#34;link&#34; href=&#34;http://refactoring.com&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;refactoring.com&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        
    </channel>
</rss>
