<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Android on lllovol</title>
        <link>https://lllovol.com/tags/android/</link>
        <description>Recent content in Android on lllovol</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <lastBuildDate>Sat, 08 Jun 2019 16:49:49 +0000</lastBuildDate><atom:link href="https://lllovol.com/tags/android/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>Android开发笔记（一)</title>
        <link>https://lllovol.com/p/android-idea/</link>
        <pubDate>Sat, 08 Jun 2019 16:49:49 +0000</pubDate>
        
        <guid>https://lllovol.com/p/android-idea/</guid>
        <description>&lt;img src="https://lllovol.oss-cn-beijing.aliyuncs.com/assets/img/5.jpg" alt="Featured image of post Android开发笔记（一)" /&gt;&lt;h1 id=&#34;前言&#34;&gt;前言&lt;/h1&gt;
&lt;p&gt;最近在帮朋友优化一个安卓的应用，使用Android来实现的一个华容道的小游戏。 &lt;a class=&#34;link&#34; href=&#34;https://github.com/MikarLittle/HuaRongDao&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;项目链接&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;android-studio的开发项目文件结构图&#34;&gt;Android Studio的开发项目文件结构图&lt;/h1&gt;
&lt;p&gt;主要显示的是src文件夹下的结构&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;	 .
	├── AndroidManifest.xml 
	├── java
	│   └── com
	│       └── example
	│           └── huarongdao
	│               ├── AboutActivity.java
	│               ├── Block.java
	│               ├── Dimension.java
	│               ├── Klotski.java
	│               ├── KlotskiMapParser.java
	│               ├── L.java
	│               ├── Level1Activity.java
	│               ├── Level2Activity.java
	│               ├── Level3Activity.java
	│               ├── Level4Activity.java
	│               ├── LevelActivity.java
	│               ├── MainActivity.java
	│               └── Screen.java
	└── res
	    ├── drawable
	    ├── drawable-v24
	    ├── layout
	    ├── mipmap-anydpi-v26
	    ├── mipmap-hdpi
	    ├── mipmap-mdpi
	    ├── mipmap-xhdpi
	    ├── mipmap-xxhdpi
	    ├── mipmap-xxxhdpi
	    ├── temp-mipmap
	    └── values
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;androidmanifestxml&#34;&gt;AndroidManifest.xml&lt;/h1&gt;
&lt;p&gt;这个配置文件中主要用来说明整个app都将使用哪一些Activity，同时也可以设置有没有上面的导航栏等功能。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;	&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;utf-8&amp;quot;?&amp;gt;
	&amp;lt;manifest xmlns:android=&amp;quot;http://schemas.android.com/apk/res/android&amp;quot;
	    xmlns:tools=&amp;quot;http://schemas.android.com/tools&amp;quot;
	    package=&amp;quot;com.example.huarongdao&amp;quot;&amp;gt;

	    &amp;lt;application
	        android:allowBackup=&amp;quot;true&amp;quot;
	        android:icon=&amp;quot;@mipmap/ic_launcher&amp;quot;
	        android:label=&amp;quot;@string/app_name&amp;quot;
	        android:roundIcon=&amp;quot;@mipmap/ic_launcher_round&amp;quot;
	        android:supportsRtl=&amp;quot;true&amp;quot;
	        android:theme=&amp;quot;@style/AppTheme&amp;quot;
	        tools:ignore=&amp;quot;GoogleAppIndexingWarning&amp;quot;&amp;gt;
	        &amp;lt;activity
	            android:name=&amp;quot;.Level1Activity&amp;quot;
	            android:theme=&amp;quot;@style/AppTheme.NoActionBar&amp;quot; /&amp;gt;
	        &amp;lt;activity
	            android:name=&amp;quot;.Level2Activity&amp;quot;
	            android:theme=&amp;quot;@style/AppTheme.NoActionBar&amp;quot; /&amp;gt;
	        &amp;lt;activity
	            android:name=&amp;quot;.Level3Activity&amp;quot;
	            android:theme=&amp;quot;@style/AppTheme.NoActionBar&amp;quot; /&amp;gt;
	        &amp;lt;activity
	            android:name=&amp;quot;.Level4Activity&amp;quot;
	            android:theme=&amp;quot;@style/AppTheme.NoActionBar&amp;quot; /&amp;gt;
	        &amp;lt;activity
	            android:name=&amp;quot;.AboutActivity&amp;quot;
	            android:theme=&amp;quot;@style/AppTheme.NoActionBar&amp;quot; /&amp;gt;
	        &amp;lt;activity
	            android:name=&amp;quot;.LevelActivity&amp;quot;
	            android:theme=&amp;quot;@style/AppTheme.NoActionBar&amp;quot; /&amp;gt;
	        &amp;lt;activity
	            android:name=&amp;quot;.MainActivity&amp;quot;
	            android:theme=&amp;quot;@style/AppTheme.NoActionBar&amp;quot;&amp;gt;
	            &amp;lt;intent-filter&amp;gt;
	                &amp;lt;action android:name=&amp;quot;android.intent.action.MAIN&amp;quot; /&amp;gt;

	                &amp;lt;category android:name=&amp;quot;android.intent.category.LAUNCHER&amp;quot; /&amp;gt;
	            &amp;lt;/intent-filter&amp;gt;
	        &amp;lt;/activity&amp;gt;
	    &amp;lt;/application&amp;gt;

	&amp;lt;/manifest&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;res文件夹下的layout&#34;&gt;Res文件夹下的Layout&lt;/h1&gt;
&lt;pre&gt;&lt;code&gt;	    ├── layout
	    │   ├── activity_about.xml
	    │   ├── activity_level.xml
	    │   ├── activity_level1.xml
	    │   ├── activity_level2.xml
	    │   ├── activity_level3.xml
	    │   ├── activity_level4.xml
	    │   └── activity_main.xml
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;在这个文件夹中的，就是app的各个页面的布局文件，在右方有可以直接拖动添加组件，但是拖动而得到的位置，最终都不是那么的准确。
因此一般都主要在代码中体现布局，这是可以最终确定布局是什么样子的。&lt;br&gt;
目前我常用的布局有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;RelativeLayout相对布局&lt;/li&gt;
&lt;li&gt;ConstraintLayout约束布局&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;res的其他配置文件&#34;&gt;Res的其他配置文件&lt;/h1&gt;
&lt;h4 id=&#34;drawable文件夹&#34;&gt;drawable文件夹&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;	    ├── drawable
	    │   ├── aboutbtn.xml
	    │   ├── angry.jpg
	    │   ├── back_icon.jpg
	    │   ├── backimage.jpg
	    │   ├── btn.xml
	    │   ├── cry.jpg
	    │   ├── ic_launcher_background.xml
	    │   ├── levelback.jpg
	    │   └── surprise_icon.jpg
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这个文件夹主要用于存放图片的资源文件，可以使用xml来配置图片被点击的时候的动画（press=false或者press=true的时候分别显示哪一张图）&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;	&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;utf-8&amp;quot;?&amp;gt;
	&amp;lt;selector xmlns:android=&amp;quot;http://schemas.android.com/apk/res/android&amp;quot;&amp;gt;
	    &amp;lt;item android:drawable=&amp;quot;@drawable/surprise_icon&amp;quot;
	        android:state_pressed=&amp;quot;true&amp;quot;/&amp;gt;
	    &amp;lt;item android:drawable=&amp;quot;@drawable/back_icon&amp;quot;
	        android:state_pressed=&amp;quot;false&amp;quot;/&amp;gt;
	&amp;lt;/selector&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;在上面的代码中，android:state_pressed=&amp;ldquo;true&amp;quot;的时候（也就是受到按压的时候），就显示surprise_icon，如果为&amp;quot;false&amp;quot;就显示back_icon&lt;/p&gt;
&lt;h4 id=&#34;values文件夹&#34;&gt;values文件夹&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;	    └── values
	        ├── attrs.xml
	        ├── colors.xml
	        ├── dimens.xml
	        ├── strings.xml
	        └── styles.xml
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;在这些xml文件当中，可以配置Android应用中的各种属性。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;	&amp;lt;resources&amp;gt;
	    &amp;lt;dimen name=&amp;quot;fab_margin&amp;quot;&amp;gt;16dp&amp;lt;/dimen&amp;gt;
	    &amp;lt;dimen name=&amp;quot;level_text_size&amp;quot;&amp;gt;24sp&amp;lt;/dimen&amp;gt;
	    &amp;lt;dimen name=&amp;quot;level_text_size_big&amp;quot;&amp;gt;30sp&amp;lt;/dimen&amp;gt;
	    &amp;lt;dimen name=&amp;quot;level_text_width&amp;quot;&amp;gt;192dp&amp;lt;/dimen&amp;gt;

	&amp;lt;/resources&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;但是有一点需要注意的是&lt;/strong&gt;,在调用的时候不需要加s&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;   android:textSize=&amp;quot;@dimen/level_text_size&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;java文件夹&#34;&gt;Java文件夹&lt;/h1&gt;
&lt;p&gt;在这个文件夹下主要就是用来实现程序主要逻辑的部分。一般开发需要以下几个步骤&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;需要一个类Activity继承AppCompatActivity&lt;/li&gt;
&lt;li&gt;重写类中的onCreate方法，将类与对应的Layout绑定（使用R.layout.**__activity）&lt;/li&gt;
&lt;li&gt;使用findViewById方法，可以将layout中的各个组件，通过id找到，然后和java对象进行绑定，然后进行相应的操作&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;例子监听textview的点击事件&#34;&gt;例子：监听TextView的点击事件&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;   	final TextView aboutGame = findViewById(R.id.about);
    aboutGame.setOnTouchListener(new View.OnTouchListener() {
        @Override
        public boolean onTouch(View v, MotionEvent event) {
            switch (event.getAction()) {
                case MotionEvent.ACTION_DOWN:
                    aboutBtn.setBackgroundResource(R.drawable.angry);
                    aboutGame.setTextColor(getResources().getColor(R.color.colorGrey));
                    break;
                case MotionEvent.ACTION_UP:
                    aboutBtn.setBackgroundResource(R.drawable.cry);
                    aboutGame.setTextColor(getResources().getColor(R.color.colorb));
                    break;
            }
            return false;
        }
    });
&lt;/code&gt;&lt;/pre&gt;
</description>
        </item>
        
    </channel>
</rss>
