<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Redis on lllovol</title>
        <link>https://lllovol.com/tags/redis/</link>
        <description>Recent content in Redis on lllovol</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <lastBuildDate>Mon, 19 Aug 2019 19:15:50 +0000</lastBuildDate><atom:link href="https://lllovol.com/tags/redis/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>Redis中的常用数据结构</title>
        <link>https://lllovol.com/p/redis/</link>
        <pubDate>Mon, 19 Aug 2019 19:15:50 +0000</pubDate>
        
        <guid>https://lllovol.com/p/redis/</guid>
        <description>&lt;img src="https://lllovol.oss-cn-beijing.aliyuncs.com/assets/img/2.jpg" alt="Featured image of post Redis中的常用数据结构" /&gt;&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;Redis在曾经实现用户登录token的时候使用过，但是对其的了解程度，就只是在使用的这个层次。本篇文章主要用于学习记录Redis的常见的一些数据结构。&lt;/p&gt;
&lt;h2 id=&#34;第一部分-什么是redis&#34;&gt;第一部分 什么是redis？&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;是NoSql数据库，非关系型数据库。&lt;/li&gt;
&lt;li&gt;是个非关系型数据库。&lt;/li&gt;
&lt;li&gt;Key-Value数据库&lt;/li&gt;
&lt;li&gt;使用C语言实现的单线程应用，基于内存，读取的速度都超快！&lt;/li&gt;
&lt;li&gt;基于内存存放,使用了rdb （就是redis内存的SNAPSHOT，存到了磁盘当中）和Aof(Append only file 也就是平时操作的命令集合)的机制来保障数据的持久化，宕机的时候可以通过这两种方式来进行数据恢复。&lt;/li&gt;
&lt;li&gt;拥有丰富的Value对象，String\Hash\List\Set\ZSet\Stream&lt;/li&gt;
&lt;li&gt;拥有多种底层数据结构：SDS，list，dict，zskiplist，intset，ziplist，quicklist，zipmap，stream&lt;/li&gt;
&lt;li&gt;支持丰富功能，过期，事物&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;第二部分-常用value对象&#34;&gt;第二部分 常用Value对象&lt;/h2&gt;
&lt;h3 id=&#34;1-string对象&#34;&gt;1 String对象&lt;/h3&gt;
&lt;p&gt;最常见的类型&lt;/p&gt;
&lt;h4 id=&#34;11-编码&#34;&gt;1.1 编码&lt;/h4&gt;
&lt;p&gt;int，可以自增
embstr，就是单纯的字符串
raw&lt;/p&gt;
&lt;h4 id=&#34;12-扩容长度&#34;&gt;1.2 扩容长度&lt;/h4&gt;
&lt;p&gt;字符串在小于1M的时候，是加倍扩张的策略
在超过1M的时候，每次扩容会增加1M的空间，每个key最大512M&lt;/p&gt;
&lt;h3 id=&#34;2-list&#34;&gt;2 List&lt;/h3&gt;
&lt;p&gt;相当于java中的linkedList
插入和删除非常快，时间复杂度是O(1)&lt;/p&gt;
&lt;h4 id=&#34;21-编码&#34;&gt;2.1 编码&lt;/h4&gt;
&lt;p&gt;redis3.2之后列表的内部实现变成了quickList而非传统的ziplist或者双向链表实现。使用的是quicklist和ziplist组成的双向链表。
ziplist的分配过长和过小都不好，过小了会太多碎片化，过大了之后空间复杂度就会更大。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;list-max-ziplist-size-2可以用来设置size.
list-compress-depth 0：表示数据都不被压缩，为n的话，就是两端的n个数据不被压缩,双向链表&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;22-常用场景&#34;&gt;2.2 常用场景&lt;/h4&gt;
&lt;p&gt;消息队列&lt;/p&gt;
&lt;h3 id=&#34;3-hash&#34;&gt;3 Hash&lt;/h3&gt;
&lt;h4 id=&#34;31-编码&#34;&gt;3.1 编码&lt;/h4&gt;
&lt;p&gt;zipList 默认，所有的key value，长度都小于64，保存的键值对数量都小于512
ht（hashTable），超过了就用ht&lt;/p&gt;
&lt;h3 id=&#34;4-set和zset&#34;&gt;4 Set和ZSet&lt;/h3&gt;
&lt;p&gt;Set无序和唯一的
ZSet是可排序的，是对每一个元素添加了一个分数一样的东西&lt;/p&gt;
&lt;h4 id=&#34;41-编码&#34;&gt;4.1 编码&lt;/h4&gt;
&lt;p&gt;Set 小512用intset，大于用hashtable
ZSet 小64数量小128 用ziplist 否则用skiplist&lt;/p&gt;
&lt;h4 id=&#34;42-场景&#34;&gt;4.2 场景&lt;/h4&gt;
&lt;p&gt;跟踪唯一性数据，比如说排行榜&lt;/p&gt;
&lt;h3 id=&#34;5-stream&#34;&gt;5 stream&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;是redis5.0 后引入的一种新数据类型。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Stream的多个客户端是竞争关系，可以拿到以前的数据，是通过id来获取的，stream会永久的存储数据
和KafKa的机制很类似。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;提供了消费者组，不同组接受到的数据一致，组内是竞争关系。
可以设置为阻塞和非阻塞的&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;类型和编码的对应关系，是在redisObject这个类中进行存储的&lt;/p&gt;
&lt;h2 id=&#34;第三部分-底层数据结构&#34;&gt;第三部分 底层数据结构&lt;/h2&gt;
&lt;h3 id=&#34;1-dict字典&#34;&gt;1 dict字典&lt;/h3&gt;
&lt;p&gt;底层实现&lt;/p&gt;
&lt;p&gt;扩容和缩容是根据负载因子的值来做的&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;used/size&lt;/li&gt;
&lt;li&gt;如果大于1 且没有备份&lt;/li&gt;
&lt;li&gt;如果大于5 且在备份
那么就扩容，如果小于0.1那么来进行缩容&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;h1设置为扩容缩容所需要设置的大小&lt;/li&gt;
&lt;li&gt;h0rehash放入h1当中，释放h0，给h1改名&lt;/li&gt;
&lt;li&gt;不会锁主线程，会在每次的操作的过程中，做一次渐进的hash的过程&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;2-ziplist&#34;&gt;2 ziplist&lt;/h3&gt;
&lt;p&gt;是redis为了节约内存而进行开发的
是由一系列的特殊编码的连续内存块所组成的顺序形数据结构&lt;/p&gt;
&lt;h2 id=&#34;第四部分-其他事件&#34;&gt;第四部分 其他事件&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;过期操作&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;定时删除策略&lt;/li&gt;
&lt;li&gt;惰性删除策略&lt;/li&gt;
&lt;li&gt;定期删除策略，每段时间删除一批，但是不会全量的删除&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;内存淘汰机制&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;noeviction&lt;/li&gt;
&lt;li&gt;allkeys-lru&lt;/li&gt;
&lt;li&gt;allkeys-random&lt;/li&gt;
&lt;li&gt;volatile-lru&lt;/li&gt;
&lt;li&gt;volatile-random&lt;/li&gt;
&lt;li&gt;volatile-ttl&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        
    </channel>
</rss>
