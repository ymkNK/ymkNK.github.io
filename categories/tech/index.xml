<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tech on lllovol</title>
    <link>https://lllovol.com/categories/tech/</link>
    <description>Recent content in Tech on lllovol</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 19 Aug 2019 19:15:50 +0000</lastBuildDate><atom:link href="https://lllovol.com/categories/tech/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Redis中的常用数据结构</title>
      <link>https://lllovol.com/p/redis/</link>
      <pubDate>Mon, 19 Aug 2019 19:15:50 +0000</pubDate>
      
      <guid>https://lllovol.com/p/redis/</guid>
      <description>前言 Redis在曾经实现用户登录token的时候使用过，但是对其的了解程度，就只是在使用的这个层次。本篇文章主要用于学习记录Redis的常见的一些数据结构。
第一部分 什么是redis？  是NoSql数据库，非关系型数据库。 是个非关系型数据库。 Key-Value数据库 使用C语言实现的单线程应用，基于内存，读取的速度都超快！ 基于内存存放,使用了rdb （就是redis内存的SNAPSHOT，存到了磁盘当中）和Aof(Append only file 也就是平时操作的命令集合)的机制来保障数据的持久化，宕机的时候可以通过这两种方式来进行数据恢复。 拥有丰富的Value对象，String\Hash\List\Set\ZSet\Stream 拥有多种底层数据结构：SDS，list，dict，zskiplist，intset，ziplist，quicklist，zipmap，stream 支持丰富功能，过期，事物  第二部分 常用Value对象 1 String对象 最常见的类型
1.1 编码 int，可以自增 embstr，就是单纯的字符串 raw
1.2 扩容长度 字符串在小于1M的时候，是加倍扩张的策略 在超过1M的时候，每次扩容会增加1M的空间，每个key最大512M
2 List 相当于java中的linkedList 插入和删除非常快，时间复杂度是O(1)
2.1 编码 redis3.2之后列表的内部实现变成了quickList而非传统的ziplist或者双向链表实现。使用的是quicklist和ziplist组成的双向链表。 ziplist的分配过长和过小都不好，过小了会太多碎片化，过大了之后空间复杂度就会更大。
 list-max-ziplist-size-2可以用来设置size. list-compress-depth 0：表示数据都不被压缩，为n的话，就是两端的n个数据不被压缩,双向链表
 2.2 常用场景 消息队列
3 Hash 3.1 编码 zipList 默认，所有的key value，长度都小于64，保存的键值对数量都小于512 ht（hashTable），超过了就用ht
4 Set和ZSet Set无序和唯一的 ZSet是可排序的，是对每一个元素添加了一个分数一样的东西
4.1 编码 Set 小512用intset，大于用hashtable ZSet 小64数量小128 用ziplist 否则用skiplist
4.2 场景 跟踪唯一性数据，比如说排行榜</description>
    </item>
    
    <item>
      <title>Idea代码飘红的问题解决方式</title>
      <link>https://lllovol.com/p/ide-code-error-solution/</link>
      <pubDate>Wed, 07 Aug 2019 10:08:30 +0000</pubDate>
      
      <guid>https://lllovol.com/p/ide-code-error-solution/</guid>
      <description>前言 在安装使用Idea Intelli的时候，导入新项目的时候，总会出现代码权限飘红的问题。本篇文章，就是介绍出现这种问题的几种情况和分别的解决方式。 情况一：maven二方库settings没有设置 一般公司内部都会有自己的二方库建设，新人在git下项目之后，总是会出现代码偏红的问题，各种库都没有导入下来，这时候首先应该排查的就是maven的配置是否正确，是否正确连接到了公司内部的二方库。
解决方式 以Idea Intelli为例: preference -&amp;gt; build,execution,deployment -&amp;gt; build tools -&amp;gt; maven -&amp;gt; User settings file: 勾选上override，改写为二方库settings.xml文件的路径
情况二：Lombok插件没有安装  Project Lombok is a java library that automatically plugs into your editor and build tools, spicing up your java. Never write another getter or equals method again, with one annotation your class has a fully featured builder, Automate your logging variables, and much more.lombok官网
 Lombok可以让我们的Java代码更加简洁，不用再去写那些Getter和Setter。然而这个强大的功能，在初次安装idea的时候，并不会内置的给我们安装Lombok插件，因此这个时候，同样也会出现大片代码报错的问题。
解决方式 安装Lombok的插件： ** preference -&amp;gt; Plugins -&amp;gt; Install lombok -&amp;gt; restart ** 问题三：注解未开启 在安装好了 Lombok之后，发现运行还是报错 解决方式  关闭项目。 Preference &amp;gt; Build, Execution, Deployment &amp;gt; Compiler &amp;gt; Annotation Processors.</description>
    </item>
    
    <item>
      <title>使用Jenkins回调获取状态</title>
      <link>https://lllovol.com/p/jenkins-callback/</link>
      <pubDate>Fri, 26 Jul 2019 11:01:52 +0000</pubDate>
      
      <guid>https://lllovol.com/p/jenkins-callback/</guid>
      <description>前言 最近的工作需要使用Jenkins执行一个特定脚本，但是使用FeignClient调用Jenkins的执行接口后，并不能获取到脚本执行之后的结果（成功和失败），本文就将介绍这种问题的其中一种解决方式。
 Jenkins是开源CI&amp;amp;CD软件领导者，提供超过1000个插件来支持构建、部署、自动化，满足任何项目的需要。Jenkins官网
 关键点 通过调研后，Jenkins在完成构建后，可以添加一个构建后操作。这就可以通过这个构建后操作，将本次构建脚本执行的结果，通过这个构建后操作，传给另外一个job，然后通过这个job将执行的结果通过回调的方式，传给应用服务器。
整个流程  服务器端创建一条记录，获取到记录的id，与需要执行的job所需要的参数还有回调所需要用到的apiHost一同存入到map当中，转换为JSON格式，通过FeignClient调用Jenkins对应的脚本。   服务器端应用可能会部署在不同的环境下，连接不同的数据库，因此可以在application.yml中配置当前apiHost的值，通过ConfigServer可以更改为当前环境所对应的值。
  在Jenkins端进行对应的job执行。
  通过构建后操作的trigger parameterized build on other projects功能。   根据本次构建的成功与否，分别执行不同的构建后操作，传递给回调job对应的参数。   回调job将获取到的信息，通过一个shell脚本，通过curl传递给服务器端。
  echo &amp;quot;${ID}&amp;quot; echo &amp;quot;${API_HOST}&amp;quot; echo &amp;quot;${BUILD_NO}&amp;quot; echo &amp;quot;${RESULT}&amp;quot; curl &amp;quot;$API_HOST/api/xxx/xxx/xxx/hook&amp;quot; -X POST -d &amp;quot;Id=$ID&amp;amp;buildNo=$BUILD_NO&amp;amp;result=$RESULT&amp;quot; 服务器端拿到数据进行更新和处理。  结语 有时候只是想要一条小小的消息，却不知道要辗转多少次，才能到达该去的地方</description>
    </item>
    
    <item>
      <title>自定义Snippet提高效率</title>
      <link>https://lllovol.com/p/snippet/</link>
      <pubDate>Sun, 16 Jun 2019 22:16:35 +0000</pubDate>
      
      <guid>https://lllovol.com/p/snippet/</guid>
      <description>前言 在书写markdown文章的时候，往往需要向其中添加图片的链接，从截图到文件的处理，到链接的获取都会很麻烦。在寻找各种图床工具之后，发现其效果都不是很好（比如要收费开通多个云图床的上传权限），因此本文将介绍另外一种较为简便的处理方式。
设置Snippet snippet是短文的意思，在ide中常常是指可以通过一小串的命令生成一大段代码或者文字的方式。例如，在sublime中输入lorem+tab。就会生成一大段样例文字
lorem+tab ==&amp;gt; Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.</description>
    </item>
    
    <item>
      <title>RocketMQ源码分享笔记</title>
      <link>https://lllovol.com/p/rocketmq/</link>
      <pubDate>Tue, 19 Mar 2019 10:54:01 +0000</pubDate>
      
      <guid>https://lllovol.com/p/rocketmq/</guid>
      <description>前言 RocketMQ，是一种延时队列，主要的应用场景，就是消费者可以延时消费消息，比如在双11的时候,一瞬间有太多请求全部打在服务器上，服务器就会瞬间瘫痪，本文主要就是记录前辈分享的Rocket源码的时候笔记和一些感悟
主要功能  负载均衡 消费模式 消费拉取 消费进度反馈 消费过滤 延迟队列  分享主要内容笔记 打字速度有限，只能记录下简单的一些片段供参考
 有一个架构，轮询，可用性高，一致性要求没那么高 消息的一个流程：生产者发了一个消息，到了breaker之后，到了commitlog。有一个G的大小，实际发送的大小，顺序写的，io性能会很好，会被放到消费者的queue里面 ，小了之后，总要发到某一个topic里面 发一个消息的话，需要新建一个主题，需要制定一个queue的数量，每一个queue就是一个负载均衡，表示当前这个queue，消费到什么位置了。集群消息，一人拿一个。被负载的queue，同一个topic下的消息都是不同的 消费者可以对同一个topic下面的某几个队列进行消费，多个不同的consumer 设置min是核心线程数，是固定的，但是她的队列是无限的，所以这个地方没有什么用 缓存超过10000个，会改变线程池的大小，会做对应的限制 msgListener就是传的一个回调 会有一个offsetStore会存，存到本地和远程 还有消息的消费逻辑，注册到客户端的，生成clientId 封装了一些拉取消息的api，通过路由信息 worker发出请求，然后又一个线程池，来进行序列化和相应，消费的话会再七环到对应consumer的线程池 有各种组件，然后讲讲启动之后，都做了哪些事情 基本上都是通过定时消息去驱动的，很少是通过事件去驱动的， 找nameserver,然后去找server的信息 更新consumer消费的一个队列offset 都不是实时的更新的，是每一个五秒钟才刷新一次的 广播消费的，消费的queue是全部，订阅，不是分发，每一个rebalance里面，都处理了一个queue，实现了一个拍照 如果没有存，就是首次消费，如果是last，就会从，rocket是经常清消息的，发消息，然后消费 消费，就是拉取消息，就是放一条消息，就可以进行拉取，会先做一些验证，然后做一些限流，只不过限流是做一些delay，顺序消息，需要设置一下是不是第一次，然后获取订阅信息，然后调用对应的pullapi，然后去发一条消息，拉倒请求之后，就会有callback，去封装一下，找到了消息了，然后有一个真正的消息处理类 处理的流程 如果全部消费成功了之后，就会找到maxOffset，如果没有的话，就会去更新最小的那一个，这就是整个的一个消费流程  自行延展 MQ是高并发系统的核心组件之一，能够提高业务效率和系统的稳定性，主流的MQ有Rocketmq、kafka、Rabbitmq
 Rocketmq原理&amp;amp;最佳实践 主要对比如下
 </description>
    </item>
    
    <item>
      <title>进程间通信的方式</title>
      <link>https://lllovol.com/p/inter-process/</link>
      <pubDate>Tue, 05 Mar 2019 16:22:56 +0000</pubDate>
      
      <guid>https://lllovol.com/p/inter-process/</guid>
      <description>前言 IPC（Inter-Process Communication，进程间通信）
有时候我们需要在不同的程序之间，也就是不同的进程之间进行通讯，那么都有些什么方式呢？通过查阅相关资料，主要有信号、管道、消息队列、共享内存等等
 进程间通信的方式
 常见的通讯方式  套接字Socket：套接字是一种进程间通信机制，与其他通信机制不同的是，它可用于不同及其间的进程通信。 信号量：信号量是一种计数器，主要是用来控制多个进程对共享资源的访问，在锁机制中应用比较多，保证在一个进程对一个资源进行访问的时候，其他进程不能对其进行资源访问 信号：信号是一种比较复杂的通信方式，用于通知接收进程某个事件已经发生。 共享内存：内存共享是最快的IPC方式（SharedMemory）。就是映射一段其他进程也能够进行访问的内存。这一段内存虽然是由一个进程进行创建，但是多个进程都能进行访问。通常和信号量配合使用，来实现进程之间的同步和通信。 管道pipe：管道是一种半双工的通信方式，数据只能单向流动，而且只能在具有亲缘关系的进程间使用。进程的亲缘关系通常是指父子进程关系。 命名管道FIFO：有名管道也是半双工的通信方式，但是它允许无亲缘关系进程间的通信。 消息队列MessageQueue：消息队列是由消息的链表，存放在内核中并由消息队列标识符标识。消息队列克服了信号传递信息少、管道只能承载无格式字节流以及缓冲区大小受限等缺点。
以上的任何一点都可以单独拿出来做一篇文章，路漫漫其修远兮  文章中已经写得很好了：）站在了巨人的肩膀上</description>
    </item>
    
    <item>
      <title>Yaml和Java对象之间的相互转换</title>
      <link>https://lllovol.com/p/yamlbeans/</link>
      <pubDate>Fri, 22 Feb 2019 21:46:09 +0000</pubDate>
      
      <guid>https://lllovol.com/p/yamlbeans/</guid>
      <description>前言 最近需要做一个将java对象转换成yaml文件格式的工作，由于手动进行操作的话效率会很低下，因此再找有没有合适的包可以使用。最后找到的工具就是yamlBeans,本文主要是翻译整理yamlBeans中的一部分信息
 yamlBeans官网
yaml文档的学习
 添加依赖 将下列代码添加到pom文件当中
&amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;com.esotericsoftware.yamlbeans&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;yamlbeans&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;1.12&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt;  Yaml反序列化为常见数据结构 所谓的反序列化，就是将yaml格式的文件，转换为java的常见数据结构 主要使用的类是YamlReader，然后可以将yaml文档转换为HashMap，ArrayList,还有Strings类型。
yaml：
name: Nathan Sweet age: 28 address: 4011 16th Ave S phone numbers: - name: Home number: 206-555-5138 - name: Work number: 425-555-2306  code:
YamlReader reader = new YamlReader(new FileReader(&amp;quot;contact.yml&amp;quot;)); Object object = reader.read(); System.out.println(object); Map map = (Map)object; System.out.println(map.get(&amp;quot;address&amp;quot;));  Yaml反序列化为POJO 将yaml文档反序列化为pojo(plain ordinary java object)
Yaml and java class:
name: Nathan Sweet age: 28 public class Contact { public String name; public int age; }  Code:</description>
    </item>
    
    <item>
      <title>关于吞吐量的一些小知识</title>
      <link>https://lllovol.com/p/qps/</link>
      <pubDate>Mon, 07 Jan 2019 15:23:02 +0000</pubDate>
      
      <guid>https://lllovol.com/p/qps/</guid>
      <description>RT 响应时间 response time相应时间
响应时间是提交请求和返回该请求的响应之间使用的时间。
主要包括：
 数据库查询的时间 将字符传到终端上面所花的时间 访问web页面所花的时间  对于没有并发的系统而言，响应时间是一个合理并且准确的性能指标。但是响应时间的绝对值并不能反应性能的高低，软件的性能高低实际取决于用户对于该响应时间的接受度。 这就像是恋爱中的感情一样，你回复消息的快慢并不能反应你有多么爱她，而是取决于她对于你的这些行为的接受程度。TPS 每秒事物处理量 Transaction Per Second 吞吐量的（Throughput），吞吐量是指系统在单位时间内处理请求的数量。
对于单应用系统而言，吞吐量和响应时间严格成反比。单应用使用响应时间来作为衡量的指标，但是对于并发系统而言，通常需要吞吐量作为性能指标。因为在一个并发系统下，当一个用户一个请求的时间为t,但是n个用户一同请求往往不是n*t（可能大，可能小，需要看具体的情况）。一个并发系统如果配置合理，相应时间应该不会随着用户的增多而线性增加。因此才将吞吐量作为并发系统的性能衡量指标。一般而言，对于不同用户规模和不同的用户模式的系统，如果系统的最大吞吐量大致相同的话，可以判断两个系统的数据处理能力基本相同。
并发用户数 并发用户数指的是系统最大可以承受的正常使用系统功能的用户数。这个指标比TPS更加笼统，但是也更加的直观。但是这是一个非常不准确的指标，比如一个直播的弹幕网站，用户可以登录，正常发送弹幕，但是如果都挤在了一个直播间，同一时间发送一大堆弹幕，这时候的服务器可能就会崩了。而且用户在线的时候，大部分时间都在阅读信息，只有小部分的再发送请求，这样的情况是很多的。这项指标很大情况下取决于用户的行为模式。
QPS 每秒查询数量 Query Per Second
 每秒查询率QPS是对一个特定的查询服务器在规定时间内所处理流量多少的衡量标准，在因特网上，作为域名系统服务器的机器的性能经常用每秒查询率来衡量。对应fetches/sec，即每秒的响应请求数，也即是最大吞吐能力。 （看来是类似于TPS，只是应用于特定场景的吞吐量）摘自cnblog
 </description>
    </item>
    
    <item>
      <title>安装atom的atom-beautify</title>
      <link>https://lllovol.com/p/%E5%AE%89%E8%A3%85atom%E7%9A%84atom-beautify/</link>
      <pubDate>Fri, 07 Dec 2018 17:03:25 +0000</pubDate>
      
      <guid>https://lllovol.com/p/%E5%AE%89%E8%A3%85atom%E7%9A%84atom-beautify/</guid>
      <description>前言 想给atom安装beautify的插件 使用apm install atom-beautify 和是用preference中的插件安装都失败了
Start 使用github 克隆到本地，然后安装
 cd ~/.atom/packages git clone https://github.com/Glavin001/atom-beautify.git cd atom-beautify npm install  Success 使用control + alt + b 组合键 即可</description>
    </item>
    
    <item>
      <title>使用Rakefile实现文章生成器</title>
      <link>https://lllovol.com/p/rake/</link>
      <pubDate>Wed, 05 Dec 2018 01:23:16 +0000</pubDate>
      
      <guid>https://lllovol.com/p/rake/</guid>
      <description>使用github.io来写blog 本就是件很棒的事情，但是每次在想写新的文章的时候，都需要重新复制title和开头的标签，如果能够自动化地完成这件事就好了（重复性的东西工作）
About Rakefile  Rake is a Make-like program implemented in Ruby. Tasks and dependencies are specified in standard Ruby syntax.
 摘自http://docs.seattlerb.org/rake/
安装Rake sudo gem install rake  即可
创建Rakefile 在项目的根目录下
touch Rakefile vim Rakefile  然后添加如下代码
task :default =&amp;gt; :new require &#39;fileutils&#39; desc &amp;quot;创建新 post&amp;quot; task :new do puts &amp;quot;请输入要创建的文章文件文件名字：&amp;quot; @url = STDIN.gets.chomp puts &amp;quot;请输入文章的标题：&amp;quot; @name = STDIN.gets.chomp puts &amp;quot;请输入文章的子标题：&amp;quot; @slug = STDIN.gets.chomp puts &amp;quot;请输入文章的分类，以空格分隔：&amp;quot; @categories = STDIN.</description>
    </item>
    
  </channel>
</rss>
