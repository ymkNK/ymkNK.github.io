<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Refactoring on lllovol</title>
    <link>https://lllovol.com/categories/refactoring/</link>
    <description>Recent content in Refactoring on lllovol</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 07 Dec 2021 21:05:58 +0000</lastBuildDate><atom:link href="https://lllovol.com/categories/refactoring/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>《重构》-重构的原则</title>
      <link>https://lllovol.com/p/2021/12/refactoring-principles/</link>
      <pubDate>Tue, 07 Dec 2021 21:05:58 +0000</pubDate>
      
      <guid>https://lllovol.com/p/2021/12/refactoring-principles/</guid>
      <description>前言 本文是一篇关于Martin Fowler《重构：改善既有代码的设计》的第二章读书笔记与总结。
何谓重构 很多一线的实践者会非常随意的使用重构这个词，但是作者会非常严谨地使用重构。
 重构（名词）：对软件内部的结构的一种调整，目的是在不改变可观察行为的前提下，提高其可理解性，降低其修改成本 重构（动词）：使用一系列重构手法，在不改变可观察行为的前提下，调整其结构。  重构的关键在于运用大量微且保持软件行为的步骤，一步步达成大规模的修改。 每个单独的重构呀么很小，要么由若干个小步骤组合而成。这样的好处是，即使重构没有完成，也可以在任何时刻停下来，代码很少进入到不可工作的状态。
重构与性能优化 二者有很多相似之处
 都需要修改代码 都不会改变程序的整体功能  区别
 重构是为了让代码更容易理解，更易于修改。这可能会让程序运行的更快，也可能运行的更慢。 性能优化时，只关心如何让代码程序运行得更快，最终得到的代码有可能更难理解和维护，对此需要有心理准备。  </description>
    </item>
    
  </channel>
</rss>
